import os
import cv2
import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr

# مكتبات الحركات للغات المختلفة
libraries = {
    "العربية": {
        "أكل": "videos/arabic/eat.mp4",
        "شرب": "videos/arabic/drink.mp4",
        "صباح": "videos/arabic/morning.mp4",
    },
    "الإنجليزية": {
        "eat": "videos/english/eat.mp4",
        "drink": "videos/english/drink.mp4",
        "morning": "videos/english/morning.mp4",
    },
    "الفرنسية": {
        "manger": "videos/french/eat.mp4",
        "boire": "videos/french/drink.mp4",
        "matin": "videos/french/morning.mp4",
    },
    "الصينية": {
        "吃": "videos/chinese/eat.mp4",
        "喝": "videos/chinese/drink.mp4",
        "早上": "videos/chinese/morning.mp4",
    },
    "الروسية": {
        "есть": "videos/russian/eat.mp4",
        "пить": "videos/russian/drink.mp4",
        "утро": "videos/russian/morning.mp4",
    },
}

# اللغة الحالية
current_language = "العربية"

# وظيفة لتحليل النص وتشغيل الحركات
def text_to_sign(text):
    words = text.split()
    library = libraries[current_language]
    for word in words:
        if word in library:
            play_video(library[word])
        else:
            messagebox.showwarning("تنبيه", f"الحركة غير متوفرة للكلمة: {word}")

# وظيفة لتشغيل الفيديو
def play_video(video_path):
    if not os.path.exists(video_path):
        messagebox.showerror("خطأ", "الفيديو غير موجود!")
        return
    cap = cv2.VideoCapture(video_path)
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imshow('لغة الإشارة', frame)
        if cv2.waitKey(25) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

# وظيفة لتحويل الصوت إلى نص
def audio_to_text():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        messagebox.showinfo("تعليمات", "تحدث الآن...")
        try:
            audio = recognizer.listen(source, timeout=5)
            text = recognizer.recognize_google(audio, language={
                "العربية": "ar-SA",
                "الإنجليزية": "en-US",
                "الفرنسية": "fr-FR",
                "الصينية": "zh-CN",
                "الروسية": "ru-RU",
            }[current_language])
            messagebox.showinfo("النص المحول", f"تم التعرف على النص: {text}")
            return text
        except sr.UnknownValueError:
            messagebox.showerror("خطأ", "لم يتم التعرف على الصوت. حاول مرة أخرى.")
        except sr.RequestError:
            messagebox.showerror("خطأ", "تعذر الوصول إلى خدمة التعرف على الصوت.")
        except sr.WaitTimeoutError:
            messagebox.showerror("خطأ", "لم يتم إدخال أي صوت.")
        return None

# إنشاء واجهة المستخدم
def create_gui():
    global current_language
    root = tk.Tk()
    root.title("مترجم لغة الإشارة")
    root.geometry("400x400")

    # اختيار اللغة
    tk.Label(root, text="اختر لغة الإشارة:", font=("Arial", 14)).pack(pady=10)
    language_var = tk.StringVar(value="العربية")

    def set_language():
        global current_language
        current_language = language_var.get()
        messagebox.showinfo("إعداد", f"تم اختيار لغة الإشارة: {current_language}")

    tk.OptionMenu(root, language_var, *libraries.keys()).pack(pady=5)
    tk.Button(root, text="تأكيد اللغة", font=("Arial", 14), command=set_language).pack(pady=10)

    # مربع إدخال النص
    tk.Label(root, text="أدخل النص هنا:", font=("Arial", 14)).pack(pady=10)
    text_entry = tk.Entry(root, font=("Arial", 14), width=30)
    text_entry.pack(pady=5)

    # زر ترجمة النص
    def on_translate():
        text = text_entry.get()
        if text.strip():
            text_to_sign(text)
        else:
            messagebox.showwarning("تنبيه", "يرجى إدخال النص!")

    tk.Button(root, text="ترجمة النص", font=("Arial", 14), command=on_translate).pack(pady=10)

    # زر ترجمة الصوت
    def on_audio_translate():
        text = audio_to_text()
        if text:
            text_to_sign(text)

    tk.Button(root, text="ترجمة الصوت", font=("Arial", 14), command=on_audio_translate).pack(pady=10)

    # زر الخروج
    tk.Button(root, text="خروج", font=("Arial", 14), command=root.destroy).pack(pady=10)

    root.mainloop()

# تشغيل البرنامج
try:
    create_gui()
except Exception as e:
    messagebox.showerror("خطأ غير متوقع", f"حدث خطأ: {str(e)}")
